# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Person(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userid': 'str',
        'email': 'str',
        'donate': 'str',
        'joindate': 'datetime',
        'lastlogin': 'datetime',
        'session': 'str',
        'success': 'str'
    }

    attribute_map = {
        'userid': 'userid',
        'email': 'email',
        'donate': 'donate',
        'joindate': 'joindate',
        'lastlogin': 'lastlogin',
        'session': 'session',
        'success': 'success'
    }

    def __init__(self, userid=None, email=None, donate=None, joindate=None, lastlogin=None, session=None, success=None, _configuration=None):  # noqa: E501
        """Person - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._userid = None
        self._email = None
        self._donate = None
        self._joindate = None
        self._lastlogin = None
        self._session = None
        self._success = None
        self.discriminator = None

        if userid is not None:
            self.userid = userid
        if email is not None:
            self.email = email
        if donate is not None:
            self.donate = donate
        if joindate is not None:
            self.joindate = joindate
        if lastlogin is not None:
            self.lastlogin = lastlogin
        if session is not None:
            self.session = session
        if success is not None:
            self.success = success

    @property
    def userid(self):
        """Gets the userid of this Person.  # noqa: E501


        :return: The userid of this Person.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Person.


        :param userid: The userid of this Person.  # noqa: E501
        :type: str
        """

        self._userid = userid

    @property
    def email(self):
        """Gets the email of this Person.  # noqa: E501


        :return: The email of this Person.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Person.


        :param email: The email of this Person.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def donate(self):
        """Gets the donate of this Person.  # noqa: E501


        :return: The donate of this Person.  # noqa: E501
        :rtype: str
        """
        return self._donate

    @donate.setter
    def donate(self, donate):
        """Sets the donate of this Person.


        :param donate: The donate of this Person.  # noqa: E501
        :type: str
        """

        self._donate = donate

    @property
    def joindate(self):
        """Gets the joindate of this Person.  # noqa: E501


        :return: The joindate of this Person.  # noqa: E501
        :rtype: datetime
        """
        return self._joindate

    @joindate.setter
    def joindate(self, joindate):
        """Sets the joindate of this Person.


        :param joindate: The joindate of this Person.  # noqa: E501
        :type: datetime
        """

        self._joindate = joindate

    @property
    def lastlogin(self):
        """Gets the lastlogin of this Person.  # noqa: E501


        :return: The lastlogin of this Person.  # noqa: E501
        :rtype: datetime
        """
        return self._lastlogin

    @lastlogin.setter
    def lastlogin(self, lastlogin):
        """Sets the lastlogin of this Person.


        :param lastlogin: The lastlogin of this Person.  # noqa: E501
        :type: datetime
        """

        self._lastlogin = lastlogin

    @property
    def session(self):
        """Gets the session of this Person.  # noqa: E501


        :return: The session of this Person.  # noqa: E501
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this Person.


        :param session: The session of this Person.  # noqa: E501
        :type: str
        """

        self._session = session

    @property
    def success(self):
        """Gets the success of this Person.  # noqa: E501


        :return: The success of this Person.  # noqa: E501
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Person.


        :param success: The success of this Person.  # noqa: E501
        :type: str
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Person, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Person):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Person):
            return True

        return self.to_dict() != other.to_dict()
