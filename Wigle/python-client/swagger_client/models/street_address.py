# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StreetAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'housenumber': 'str',
        'road': 'str',
        'city': 'str',
        'region': 'str',
        'country': 'str',
        'postalcode': 'str'
    }

    attribute_map = {
        'housenumber': 'housenumber',
        'road': 'road',
        'city': 'city',
        'region': 'region',
        'country': 'country',
        'postalcode': 'postalcode'
    }

    def __init__(self, housenumber=None, road=None, city=None, region=None, country=None, postalcode=None, _configuration=None):  # noqa: E501
        """StreetAddress - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._housenumber = None
        self._road = None
        self._city = None
        self._region = None
        self._country = None
        self._postalcode = None
        self.discriminator = None

        if housenumber is not None:
            self.housenumber = housenumber
        if road is not None:
            self.road = road
        if city is not None:
            self.city = city
        if region is not None:
            self.region = region
        if country is not None:
            self.country = country
        if postalcode is not None:
            self.postalcode = postalcode

    @property
    def housenumber(self):
        """Gets the housenumber of this StreetAddress.  # noqa: E501


        :return: The housenumber of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._housenumber

    @housenumber.setter
    def housenumber(self, housenumber):
        """Sets the housenumber of this StreetAddress.


        :param housenumber: The housenumber of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._housenumber = housenumber

    @property
    def road(self):
        """Gets the road of this StreetAddress.  # noqa: E501


        :return: The road of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._road

    @road.setter
    def road(self, road):
        """Sets the road of this StreetAddress.


        :param road: The road of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._road = road

    @property
    def city(self):
        """Gets the city of this StreetAddress.  # noqa: E501


        :return: The city of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this StreetAddress.


        :param city: The city of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def region(self):
        """Gets the region of this StreetAddress.  # noqa: E501


        :return: The region of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this StreetAddress.


        :param region: The region of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def country(self):
        """Gets the country of this StreetAddress.  # noqa: E501


        :return: The country of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this StreetAddress.


        :param country: The country of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def postalcode(self):
        """Gets the postalcode of this StreetAddress.  # noqa: E501


        :return: The postalcode of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._postalcode

    @postalcode.setter
    def postalcode(self, postalcode):
        """Sets the postalcode of this StreetAddress.


        :param postalcode: The postalcode of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._postalcode = postalcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StreetAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreetAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StreetAddress):
            return True

        return self.to_dict() != other.to_dict()
