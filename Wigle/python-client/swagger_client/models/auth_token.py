# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_name': 'str',
        'token': 'str',
        'status': 'str',
        'type': 'str',
        'person_id': 'int'
    }

    attribute_map = {
        'auth_name': 'authName',
        'token': 'token',
        'status': 'status',
        'type': 'type',
        'person_id': 'personId'
    }

    def __init__(self, auth_name=None, token=None, status=None, type=None, person_id=None, _configuration=None):  # noqa: E501
        """AuthToken - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_name = None
        self._token = None
        self._status = None
        self._type = None
        self._person_id = None
        self.discriminator = None

        if auth_name is not None:
            self.auth_name = auth_name
        if token is not None:
            self.token = token
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if person_id is not None:
            self.person_id = person_id

    @property
    def auth_name(self):
        """Gets the auth_name of this AuthToken.  # noqa: E501


        :return: The auth_name of this AuthToken.  # noqa: E501
        :rtype: str
        """
        return self._auth_name

    @auth_name.setter
    def auth_name(self, auth_name):
        """Sets the auth_name of this AuthToken.


        :param auth_name: The auth_name of this AuthToken.  # noqa: E501
        :type: str
        """

        self._auth_name = auth_name

    @property
    def token(self):
        """Gets the token of this AuthToken.  # noqa: E501


        :return: The token of this AuthToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthToken.


        :param token: The token of this AuthToken.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def status(self):
        """Gets the status of this AuthToken.  # noqa: E501


        :return: The status of this AuthToken.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AuthToken.


        :param status: The status of this AuthToken.  # noqa: E501
        :type: str
        """
        allowed_values = ["STATUS_ACTIVE", "STATUS_DISABLED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this AuthToken.  # noqa: E501


        :return: The type of this AuthToken.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthToken.


        :param type: The type of this AuthToken.  # noqa: E501
        :type: str
        """
        allowed_values = ["API", "COMMAPI", "ANDROID", "COOKIE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def person_id(self):
        """Gets the person_id of this AuthToken.  # noqa: E501


        :return: The person_id of this AuthToken.  # noqa: E501
        :rtype: int
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this AuthToken.


        :param person_id: The person_id of this AuthToken.  # noqa: E501
        :type: int
        """

        self._person_id = person_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthToken):
            return True

        return self.to_dict() != other.to_dict()
