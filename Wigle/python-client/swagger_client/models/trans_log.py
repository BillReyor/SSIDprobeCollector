# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TransLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transid': 'str',
        'username': 'str',
        'first_time': 'datetime',
        'lastupdt': 'datetime',
        'file_name': 'str',
        'file_size': 'int',
        'file_lines': 'int',
        'status': 'str',
        'discovered_gps': 'int',
        'discovered': 'int',
        'total': 'int',
        'total_gps': 'int',
        'total_locations': 'int',
        'percent_done': 'float',
        'time_parsing': 'int',
        'gen_discovered': 'int',
        'gen_discovered_gps': 'int',
        'gen_total': 'int',
        'gen_total_gps': 'int',
        'gen_total_locations': 'int',
        'bt_discovered': 'int',
        'bt_discovered_gps': 'int',
        'bt_total': 'int',
        'bt_total_gps': 'int',
        'bt_total_locations': 'int',
        'wait': 'int'
    }

    attribute_map = {
        'transid': 'transid',
        'username': 'username',
        'first_time': 'firstTime',
        'lastupdt': 'lastupdt',
        'file_name': 'fileName',
        'file_size': 'fileSize',
        'file_lines': 'fileLines',
        'status': 'status',
        'discovered_gps': 'discoveredGps',
        'discovered': 'discovered',
        'total': 'total',
        'total_gps': 'totalGps',
        'total_locations': 'totalLocations',
        'percent_done': 'percentDone',
        'time_parsing': 'timeParsing',
        'gen_discovered': 'genDiscovered',
        'gen_discovered_gps': 'genDiscoveredGps',
        'gen_total': 'genTotal',
        'gen_total_gps': 'genTotalGps',
        'gen_total_locations': 'genTotalLocations',
        'bt_discovered': 'btDiscovered',
        'bt_discovered_gps': 'btDiscoveredGps',
        'bt_total': 'btTotal',
        'bt_total_gps': 'btTotalGps',
        'bt_total_locations': 'btTotalLocations',
        'wait': 'wait'
    }

    def __init__(self, transid=None, username=None, first_time=None, lastupdt=None, file_name=None, file_size=None, file_lines=None, status=None, discovered_gps=None, discovered=None, total=None, total_gps=None, total_locations=None, percent_done=None, time_parsing=None, gen_discovered=None, gen_discovered_gps=None, gen_total=None, gen_total_gps=None, gen_total_locations=None, bt_discovered=None, bt_discovered_gps=None, bt_total=None, bt_total_gps=None, bt_total_locations=None, wait=None, _configuration=None):  # noqa: E501
        """TransLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._transid = None
        self._username = None
        self._first_time = None
        self._lastupdt = None
        self._file_name = None
        self._file_size = None
        self._file_lines = None
        self._status = None
        self._discovered_gps = None
        self._discovered = None
        self._total = None
        self._total_gps = None
        self._total_locations = None
        self._percent_done = None
        self._time_parsing = None
        self._gen_discovered = None
        self._gen_discovered_gps = None
        self._gen_total = None
        self._gen_total_gps = None
        self._gen_total_locations = None
        self._bt_discovered = None
        self._bt_discovered_gps = None
        self._bt_total = None
        self._bt_total_gps = None
        self._bt_total_locations = None
        self._wait = None
        self.discriminator = None

        if transid is not None:
            self.transid = transid
        if username is not None:
            self.username = username
        if first_time is not None:
            self.first_time = first_time
        if lastupdt is not None:
            self.lastupdt = lastupdt
        if file_name is not None:
            self.file_name = file_name
        if file_size is not None:
            self.file_size = file_size
        if file_lines is not None:
            self.file_lines = file_lines
        if status is not None:
            self.status = status
        if discovered_gps is not None:
            self.discovered_gps = discovered_gps
        if discovered is not None:
            self.discovered = discovered
        if total is not None:
            self.total = total
        if total_gps is not None:
            self.total_gps = total_gps
        if total_locations is not None:
            self.total_locations = total_locations
        if percent_done is not None:
            self.percent_done = percent_done
        if time_parsing is not None:
            self.time_parsing = time_parsing
        if gen_discovered is not None:
            self.gen_discovered = gen_discovered
        if gen_discovered_gps is not None:
            self.gen_discovered_gps = gen_discovered_gps
        if gen_total is not None:
            self.gen_total = gen_total
        if gen_total_gps is not None:
            self.gen_total_gps = gen_total_gps
        if gen_total_locations is not None:
            self.gen_total_locations = gen_total_locations
        if bt_discovered is not None:
            self.bt_discovered = bt_discovered
        if bt_discovered_gps is not None:
            self.bt_discovered_gps = bt_discovered_gps
        if bt_total is not None:
            self.bt_total = bt_total
        if bt_total_gps is not None:
            self.bt_total_gps = bt_total_gps
        if bt_total_locations is not None:
            self.bt_total_locations = bt_total_locations
        if wait is not None:
            self.wait = wait

    @property
    def transid(self):
        """Gets the transid of this TransLog.  # noqa: E501


        :return: The transid of this TransLog.  # noqa: E501
        :rtype: str
        """
        return self._transid

    @transid.setter
    def transid(self, transid):
        """Sets the transid of this TransLog.


        :param transid: The transid of this TransLog.  # noqa: E501
        :type: str
        """

        self._transid = transid

    @property
    def username(self):
        """Gets the username of this TransLog.  # noqa: E501


        :return: The username of this TransLog.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TransLog.


        :param username: The username of this TransLog.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def first_time(self):
        """Gets the first_time of this TransLog.  # noqa: E501


        :return: The first_time of this TransLog.  # noqa: E501
        :rtype: datetime
        """
        return self._first_time

    @first_time.setter
    def first_time(self, first_time):
        """Sets the first_time of this TransLog.


        :param first_time: The first_time of this TransLog.  # noqa: E501
        :type: datetime
        """

        self._first_time = first_time

    @property
    def lastupdt(self):
        """Gets the lastupdt of this TransLog.  # noqa: E501


        :return: The lastupdt of this TransLog.  # noqa: E501
        :rtype: datetime
        """
        return self._lastupdt

    @lastupdt.setter
    def lastupdt(self, lastupdt):
        """Sets the lastupdt of this TransLog.


        :param lastupdt: The lastupdt of this TransLog.  # noqa: E501
        :type: datetime
        """

        self._lastupdt = lastupdt

    @property
    def file_name(self):
        """Gets the file_name of this TransLog.  # noqa: E501


        :return: The file_name of this TransLog.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this TransLog.


        :param file_name: The file_name of this TransLog.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this TransLog.  # noqa: E501


        :return: The file_size of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this TransLog.


        :param file_size: The file_size of this TransLog.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def file_lines(self):
        """Gets the file_lines of this TransLog.  # noqa: E501


        :return: The file_lines of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._file_lines

    @file_lines.setter
    def file_lines(self, file_lines):
        """Sets the file_lines of this TransLog.


        :param file_lines: The file_lines of this TransLog.  # noqa: E501
        :type: int
        """

        self._file_lines = file_lines

    @property
    def status(self):
        """Gets the status of this TransLog.  # noqa: E501


        :return: The status of this TransLog.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransLog.


        :param status: The status of this TransLog.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def discovered_gps(self):
        """Gets the discovered_gps of this TransLog.  # noqa: E501


        :return: The discovered_gps of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._discovered_gps

    @discovered_gps.setter
    def discovered_gps(self, discovered_gps):
        """Sets the discovered_gps of this TransLog.


        :param discovered_gps: The discovered_gps of this TransLog.  # noqa: E501
        :type: int
        """

        self._discovered_gps = discovered_gps

    @property
    def discovered(self):
        """Gets the discovered of this TransLog.  # noqa: E501


        :return: The discovered of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._discovered

    @discovered.setter
    def discovered(self, discovered):
        """Sets the discovered of this TransLog.


        :param discovered: The discovered of this TransLog.  # noqa: E501
        :type: int
        """

        self._discovered = discovered

    @property
    def total(self):
        """Gets the total of this TransLog.  # noqa: E501


        :return: The total of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TransLog.


        :param total: The total of this TransLog.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def total_gps(self):
        """Gets the total_gps of this TransLog.  # noqa: E501


        :return: The total_gps of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._total_gps

    @total_gps.setter
    def total_gps(self, total_gps):
        """Sets the total_gps of this TransLog.


        :param total_gps: The total_gps of this TransLog.  # noqa: E501
        :type: int
        """

        self._total_gps = total_gps

    @property
    def total_locations(self):
        """Gets the total_locations of this TransLog.  # noqa: E501


        :return: The total_locations of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._total_locations

    @total_locations.setter
    def total_locations(self, total_locations):
        """Sets the total_locations of this TransLog.


        :param total_locations: The total_locations of this TransLog.  # noqa: E501
        :type: int
        """

        self._total_locations = total_locations

    @property
    def percent_done(self):
        """Gets the percent_done of this TransLog.  # noqa: E501


        :return: The percent_done of this TransLog.  # noqa: E501
        :rtype: float
        """
        return self._percent_done

    @percent_done.setter
    def percent_done(self, percent_done):
        """Sets the percent_done of this TransLog.


        :param percent_done: The percent_done of this TransLog.  # noqa: E501
        :type: float
        """

        self._percent_done = percent_done

    @property
    def time_parsing(self):
        """Gets the time_parsing of this TransLog.  # noqa: E501


        :return: The time_parsing of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._time_parsing

    @time_parsing.setter
    def time_parsing(self, time_parsing):
        """Sets the time_parsing of this TransLog.


        :param time_parsing: The time_parsing of this TransLog.  # noqa: E501
        :type: int
        """

        self._time_parsing = time_parsing

    @property
    def gen_discovered(self):
        """Gets the gen_discovered of this TransLog.  # noqa: E501


        :return: The gen_discovered of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._gen_discovered

    @gen_discovered.setter
    def gen_discovered(self, gen_discovered):
        """Sets the gen_discovered of this TransLog.


        :param gen_discovered: The gen_discovered of this TransLog.  # noqa: E501
        :type: int
        """

        self._gen_discovered = gen_discovered

    @property
    def gen_discovered_gps(self):
        """Gets the gen_discovered_gps of this TransLog.  # noqa: E501


        :return: The gen_discovered_gps of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._gen_discovered_gps

    @gen_discovered_gps.setter
    def gen_discovered_gps(self, gen_discovered_gps):
        """Sets the gen_discovered_gps of this TransLog.


        :param gen_discovered_gps: The gen_discovered_gps of this TransLog.  # noqa: E501
        :type: int
        """

        self._gen_discovered_gps = gen_discovered_gps

    @property
    def gen_total(self):
        """Gets the gen_total of this TransLog.  # noqa: E501


        :return: The gen_total of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._gen_total

    @gen_total.setter
    def gen_total(self, gen_total):
        """Sets the gen_total of this TransLog.


        :param gen_total: The gen_total of this TransLog.  # noqa: E501
        :type: int
        """

        self._gen_total = gen_total

    @property
    def gen_total_gps(self):
        """Gets the gen_total_gps of this TransLog.  # noqa: E501


        :return: The gen_total_gps of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._gen_total_gps

    @gen_total_gps.setter
    def gen_total_gps(self, gen_total_gps):
        """Sets the gen_total_gps of this TransLog.


        :param gen_total_gps: The gen_total_gps of this TransLog.  # noqa: E501
        :type: int
        """

        self._gen_total_gps = gen_total_gps

    @property
    def gen_total_locations(self):
        """Gets the gen_total_locations of this TransLog.  # noqa: E501


        :return: The gen_total_locations of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._gen_total_locations

    @gen_total_locations.setter
    def gen_total_locations(self, gen_total_locations):
        """Sets the gen_total_locations of this TransLog.


        :param gen_total_locations: The gen_total_locations of this TransLog.  # noqa: E501
        :type: int
        """

        self._gen_total_locations = gen_total_locations

    @property
    def bt_discovered(self):
        """Gets the bt_discovered of this TransLog.  # noqa: E501


        :return: The bt_discovered of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._bt_discovered

    @bt_discovered.setter
    def bt_discovered(self, bt_discovered):
        """Sets the bt_discovered of this TransLog.


        :param bt_discovered: The bt_discovered of this TransLog.  # noqa: E501
        :type: int
        """

        self._bt_discovered = bt_discovered

    @property
    def bt_discovered_gps(self):
        """Gets the bt_discovered_gps of this TransLog.  # noqa: E501


        :return: The bt_discovered_gps of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._bt_discovered_gps

    @bt_discovered_gps.setter
    def bt_discovered_gps(self, bt_discovered_gps):
        """Sets the bt_discovered_gps of this TransLog.


        :param bt_discovered_gps: The bt_discovered_gps of this TransLog.  # noqa: E501
        :type: int
        """

        self._bt_discovered_gps = bt_discovered_gps

    @property
    def bt_total(self):
        """Gets the bt_total of this TransLog.  # noqa: E501


        :return: The bt_total of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._bt_total

    @bt_total.setter
    def bt_total(self, bt_total):
        """Sets the bt_total of this TransLog.


        :param bt_total: The bt_total of this TransLog.  # noqa: E501
        :type: int
        """

        self._bt_total = bt_total

    @property
    def bt_total_gps(self):
        """Gets the bt_total_gps of this TransLog.  # noqa: E501


        :return: The bt_total_gps of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._bt_total_gps

    @bt_total_gps.setter
    def bt_total_gps(self, bt_total_gps):
        """Sets the bt_total_gps of this TransLog.


        :param bt_total_gps: The bt_total_gps of this TransLog.  # noqa: E501
        :type: int
        """

        self._bt_total_gps = bt_total_gps

    @property
    def bt_total_locations(self):
        """Gets the bt_total_locations of this TransLog.  # noqa: E501


        :return: The bt_total_locations of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._bt_total_locations

    @bt_total_locations.setter
    def bt_total_locations(self, bt_total_locations):
        """Sets the bt_total_locations of this TransLog.


        :param bt_total_locations: The bt_total_locations of this TransLog.  # noqa: E501
        :type: int
        """

        self._bt_total_locations = bt_total_locations

    @property
    def wait(self):
        """Gets the wait of this TransLog.  # noqa: E501


        :return: The wait of this TransLog.  # noqa: E501
        :rtype: int
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this TransLog.


        :param wait: The wait of this TransLog.  # noqa: E501
        :type: int
        """

        self._wait = wait

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransLog):
            return True

        return self.to_dict() != other.to_dict()
