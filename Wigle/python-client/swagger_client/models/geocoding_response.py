# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GeocodingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'dict(str, str)',
        'lat': 'float',
        'lon': 'float',
        'importance': 'float',
        'place_id': 'int',
        'licence': 'str',
        'osm_type': 'str',
        'display_name': 'str',
        'boundingbox': 'list[float]'
    }

    attribute_map = {
        'address': 'address',
        'lat': 'lat',
        'lon': 'lon',
        'importance': 'importance',
        'place_id': 'place_id',
        'licence': 'licence',
        'osm_type': 'osm_type',
        'display_name': 'display_name',
        'boundingbox': 'boundingbox'
    }

    def __init__(self, address=None, lat=None, lon=None, importance=None, place_id=None, licence=None, osm_type=None, display_name=None, boundingbox=None, _configuration=None):  # noqa: E501
        """GeocodingResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._lat = None
        self._lon = None
        self._importance = None
        self._place_id = None
        self._licence = None
        self._osm_type = None
        self._display_name = None
        self._boundingbox = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon
        if importance is not None:
            self.importance = importance
        if place_id is not None:
            self.place_id = place_id
        if licence is not None:
            self.licence = licence
        if osm_type is not None:
            self.osm_type = osm_type
        if display_name is not None:
            self.display_name = display_name
        if boundingbox is not None:
            self.boundingbox = boundingbox

    @property
    def address(self):
        """Gets the address of this GeocodingResponse.  # noqa: E501


        :return: The address of this GeocodingResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GeocodingResponse.


        :param address: The address of this GeocodingResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._address = address

    @property
    def lat(self):
        """Gets the lat of this GeocodingResponse.  # noqa: E501


        :return: The lat of this GeocodingResponse.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this GeocodingResponse.


        :param lat: The lat of this GeocodingResponse.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this GeocodingResponse.  # noqa: E501


        :return: The lon of this GeocodingResponse.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this GeocodingResponse.


        :param lon: The lon of this GeocodingResponse.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def importance(self):
        """Gets the importance of this GeocodingResponse.  # noqa: E501


        :return: The importance of this GeocodingResponse.  # noqa: E501
        :rtype: float
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this GeocodingResponse.


        :param importance: The importance of this GeocodingResponse.  # noqa: E501
        :type: float
        """

        self._importance = importance

    @property
    def place_id(self):
        """Gets the place_id of this GeocodingResponse.  # noqa: E501


        :return: The place_id of this GeocodingResponse.  # noqa: E501
        :rtype: int
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this GeocodingResponse.


        :param place_id: The place_id of this GeocodingResponse.  # noqa: E501
        :type: int
        """

        self._place_id = place_id

    @property
    def licence(self):
        """Gets the licence of this GeocodingResponse.  # noqa: E501


        :return: The licence of this GeocodingResponse.  # noqa: E501
        :rtype: str
        """
        return self._licence

    @licence.setter
    def licence(self, licence):
        """Sets the licence of this GeocodingResponse.


        :param licence: The licence of this GeocodingResponse.  # noqa: E501
        :type: str
        """

        self._licence = licence

    @property
    def osm_type(self):
        """Gets the osm_type of this GeocodingResponse.  # noqa: E501


        :return: The osm_type of this GeocodingResponse.  # noqa: E501
        :rtype: str
        """
        return self._osm_type

    @osm_type.setter
    def osm_type(self, osm_type):
        """Sets the osm_type of this GeocodingResponse.


        :param osm_type: The osm_type of this GeocodingResponse.  # noqa: E501
        :type: str
        """

        self._osm_type = osm_type

    @property
    def display_name(self):
        """Gets the display_name of this GeocodingResponse.  # noqa: E501


        :return: The display_name of this GeocodingResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GeocodingResponse.


        :param display_name: The display_name of this GeocodingResponse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def boundingbox(self):
        """Gets the boundingbox of this GeocodingResponse.  # noqa: E501


        :return: The boundingbox of this GeocodingResponse.  # noqa: E501
        :rtype: list[float]
        """
        return self._boundingbox

    @boundingbox.setter
    def boundingbox(self, boundingbox):
        """Sets the boundingbox of this GeocodingResponse.


        :param boundingbox: The boundingbox of this GeocodingResponse.  # noqa: E501
        :type: list[float]
        """

        self._boundingbox = boundingbox

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeocodingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeocodingResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeocodingResponse):
            return True

        return self.to_dict() != other.to_dict()
