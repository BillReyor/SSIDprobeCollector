# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WiFiNetworkWithLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trilat': 'float',
        'trilong': 'float',
        'ssid': 'str',
        'qos': 'int',
        'transid': 'str',
        'firsttime': 'datetime',
        'lasttime': 'datetime',
        'lastupdt': 'datetime',
        'netid': 'str',
        'name': 'str',
        'type': 'str',
        'comment': 'str',
        'wep': 'str',
        'bcninterval': 'int',
        'freenet': 'str',
        'dhcp': 'str',
        'paynet': 'str',
        'userfound': 'bool',
        'channel': 'int',
        'location_data': 'list[WiFiLocation]',
        'encryption': 'str',
        'country': 'str',
        'region': 'str',
        'housenumber': 'str',
        'road': 'str',
        'city': 'str',
        'postalcode': 'str'
    }

    attribute_map = {
        'trilat': 'trilat',
        'trilong': 'trilong',
        'ssid': 'ssid',
        'qos': 'qos',
        'transid': 'transid',
        'firsttime': 'firsttime',
        'lasttime': 'lasttime',
        'lastupdt': 'lastupdt',
        'netid': 'netid',
        'name': 'name',
        'type': 'type',
        'comment': 'comment',
        'wep': 'wep',
        'bcninterval': 'bcninterval',
        'freenet': 'freenet',
        'dhcp': 'dhcp',
        'paynet': 'paynet',
        'userfound': 'userfound',
        'channel': 'channel',
        'location_data': 'locationData',
        'encryption': 'encryption',
        'country': 'country',
        'region': 'region',
        'housenumber': 'housenumber',
        'road': 'road',
        'city': 'city',
        'postalcode': 'postalcode'
    }

    def __init__(self, trilat=None, trilong=None, ssid=None, qos=None, transid=None, firsttime=None, lasttime=None, lastupdt=None, netid=None, name=None, type=None, comment=None, wep=None, bcninterval=None, freenet=None, dhcp=None, paynet=None, userfound=None, channel=None, location_data=None, encryption=None, country=None, region=None, housenumber=None, road=None, city=None, postalcode=None, _configuration=None):  # noqa: E501
        """WiFiNetworkWithLocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._trilat = None
        self._trilong = None
        self._ssid = None
        self._qos = None
        self._transid = None
        self._firsttime = None
        self._lasttime = None
        self._lastupdt = None
        self._netid = None
        self._name = None
        self._type = None
        self._comment = None
        self._wep = None
        self._bcninterval = None
        self._freenet = None
        self._dhcp = None
        self._paynet = None
        self._userfound = None
        self._channel = None
        self._location_data = None
        self._encryption = None
        self._country = None
        self._region = None
        self._housenumber = None
        self._road = None
        self._city = None
        self._postalcode = None
        self.discriminator = None

        if trilat is not None:
            self.trilat = trilat
        if trilong is not None:
            self.trilong = trilong
        if ssid is not None:
            self.ssid = ssid
        if qos is not None:
            self.qos = qos
        if transid is not None:
            self.transid = transid
        if firsttime is not None:
            self.firsttime = firsttime
        if lasttime is not None:
            self.lasttime = lasttime
        if lastupdt is not None:
            self.lastupdt = lastupdt
        if netid is not None:
            self.netid = netid
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if comment is not None:
            self.comment = comment
        if wep is not None:
            self.wep = wep
        if bcninterval is not None:
            self.bcninterval = bcninterval
        if freenet is not None:
            self.freenet = freenet
        if dhcp is not None:
            self.dhcp = dhcp
        if paynet is not None:
            self.paynet = paynet
        if userfound is not None:
            self.userfound = userfound
        if channel is not None:
            self.channel = channel
        if location_data is not None:
            self.location_data = location_data
        if encryption is not None:
            self.encryption = encryption
        if country is not None:
            self.country = country
        if region is not None:
            self.region = region
        if housenumber is not None:
            self.housenumber = housenumber
        if road is not None:
            self.road = road
        if city is not None:
            self.city = city
        if postalcode is not None:
            self.postalcode = postalcode

    @property
    def trilat(self):
        """Gets the trilat of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The trilat of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: float
        """
        return self._trilat

    @trilat.setter
    def trilat(self, trilat):
        """Sets the trilat of this WiFiNetworkWithLocation.


        :param trilat: The trilat of this WiFiNetworkWithLocation.  # noqa: E501
        :type: float
        """

        self._trilat = trilat

    @property
    def trilong(self):
        """Gets the trilong of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The trilong of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: float
        """
        return self._trilong

    @trilong.setter
    def trilong(self, trilong):
        """Sets the trilong of this WiFiNetworkWithLocation.


        :param trilong: The trilong of this WiFiNetworkWithLocation.  # noqa: E501
        :type: float
        """

        self._trilong = trilong

    @property
    def ssid(self):
        """Gets the ssid of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The ssid of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this WiFiNetworkWithLocation.


        :param ssid: The ssid of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._ssid = ssid

    @property
    def qos(self):
        """Gets the qos of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The qos of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: int
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this WiFiNetworkWithLocation.


        :param qos: The qos of this WiFiNetworkWithLocation.  # noqa: E501
        :type: int
        """

        self._qos = qos

    @property
    def transid(self):
        """Gets the transid of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The transid of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._transid

    @transid.setter
    def transid(self, transid):
        """Sets the transid of this WiFiNetworkWithLocation.


        :param transid: The transid of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._transid = transid

    @property
    def firsttime(self):
        """Gets the firsttime of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The firsttime of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: datetime
        """
        return self._firsttime

    @firsttime.setter
    def firsttime(self, firsttime):
        """Sets the firsttime of this WiFiNetworkWithLocation.


        :param firsttime: The firsttime of this WiFiNetworkWithLocation.  # noqa: E501
        :type: datetime
        """

        self._firsttime = firsttime

    @property
    def lasttime(self):
        """Gets the lasttime of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The lasttime of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: datetime
        """
        return self._lasttime

    @lasttime.setter
    def lasttime(self, lasttime):
        """Sets the lasttime of this WiFiNetworkWithLocation.


        :param lasttime: The lasttime of this WiFiNetworkWithLocation.  # noqa: E501
        :type: datetime
        """

        self._lasttime = lasttime

    @property
    def lastupdt(self):
        """Gets the lastupdt of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The lastupdt of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: datetime
        """
        return self._lastupdt

    @lastupdt.setter
    def lastupdt(self, lastupdt):
        """Sets the lastupdt of this WiFiNetworkWithLocation.


        :param lastupdt: The lastupdt of this WiFiNetworkWithLocation.  # noqa: E501
        :type: datetime
        """

        self._lastupdt = lastupdt

    @property
    def netid(self):
        """Gets the netid of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The netid of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._netid

    @netid.setter
    def netid(self, netid):
        """Sets the netid of this WiFiNetworkWithLocation.


        :param netid: The netid of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._netid = netid

    @property
    def name(self):
        """Gets the name of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The name of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WiFiNetworkWithLocation.


        :param name: The name of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The type of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WiFiNetworkWithLocation.


        :param type: The type of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def comment(self):
        """Gets the comment of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The comment of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this WiFiNetworkWithLocation.


        :param comment: The comment of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def wep(self):
        """Gets the wep of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The wep of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._wep

    @wep.setter
    def wep(self, wep):
        """Sets the wep of this WiFiNetworkWithLocation.


        :param wep: The wep of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._wep = wep

    @property
    def bcninterval(self):
        """Gets the bcninterval of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The bcninterval of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: int
        """
        return self._bcninterval

    @bcninterval.setter
    def bcninterval(self, bcninterval):
        """Sets the bcninterval of this WiFiNetworkWithLocation.


        :param bcninterval: The bcninterval of this WiFiNetworkWithLocation.  # noqa: E501
        :type: int
        """

        self._bcninterval = bcninterval

    @property
    def freenet(self):
        """Gets the freenet of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The freenet of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._freenet

    @freenet.setter
    def freenet(self, freenet):
        """Sets the freenet of this WiFiNetworkWithLocation.


        :param freenet: The freenet of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._freenet = freenet

    @property
    def dhcp(self):
        """Gets the dhcp of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The dhcp of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._dhcp

    @dhcp.setter
    def dhcp(self, dhcp):
        """Sets the dhcp of this WiFiNetworkWithLocation.


        :param dhcp: The dhcp of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._dhcp = dhcp

    @property
    def paynet(self):
        """Gets the paynet of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The paynet of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._paynet

    @paynet.setter
    def paynet(self, paynet):
        """Sets the paynet of this WiFiNetworkWithLocation.


        :param paynet: The paynet of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._paynet = paynet

    @property
    def userfound(self):
        """Gets the userfound of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The userfound of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: bool
        """
        return self._userfound

    @userfound.setter
    def userfound(self, userfound):
        """Sets the userfound of this WiFiNetworkWithLocation.


        :param userfound: The userfound of this WiFiNetworkWithLocation.  # noqa: E501
        :type: bool
        """

        self._userfound = userfound

    @property
    def channel(self):
        """Gets the channel of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The channel of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this WiFiNetworkWithLocation.


        :param channel: The channel of this WiFiNetworkWithLocation.  # noqa: E501
        :type: int
        """

        self._channel = channel

    @property
    def location_data(self):
        """Gets the location_data of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The location_data of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: list[WiFiLocation]
        """
        return self._location_data

    @location_data.setter
    def location_data(self, location_data):
        """Sets the location_data of this WiFiNetworkWithLocation.


        :param location_data: The location_data of this WiFiNetworkWithLocation.  # noqa: E501
        :type: list[WiFiLocation]
        """

        self._location_data = location_data

    @property
    def encryption(self):
        """Gets the encryption of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The encryption of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this WiFiNetworkWithLocation.


        :param encryption: The encryption of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._encryption = encryption

    @property
    def country(self):
        """Gets the country of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The country of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this WiFiNetworkWithLocation.


        :param country: The country of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def region(self):
        """Gets the region of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The region of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this WiFiNetworkWithLocation.


        :param region: The region of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def housenumber(self):
        """Gets the housenumber of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The housenumber of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._housenumber

    @housenumber.setter
    def housenumber(self, housenumber):
        """Sets the housenumber of this WiFiNetworkWithLocation.


        :param housenumber: The housenumber of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._housenumber = housenumber

    @property
    def road(self):
        """Gets the road of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The road of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._road

    @road.setter
    def road(self, road):
        """Sets the road of this WiFiNetworkWithLocation.


        :param road: The road of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._road = road

    @property
    def city(self):
        """Gets the city of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The city of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this WiFiNetworkWithLocation.


        :param city: The city of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postalcode(self):
        """Gets the postalcode of this WiFiNetworkWithLocation.  # noqa: E501


        :return: The postalcode of this WiFiNetworkWithLocation.  # noqa: E501
        :rtype: str
        """
        return self._postalcode

    @postalcode.setter
    def postalcode(self, postalcode):
        """Sets the postalcode of this WiFiNetworkWithLocation.


        :param postalcode: The postalcode of this WiFiNetworkWithLocation.  # noqa: E501
        :type: str
        """

        self._postalcode = postalcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WiFiNetworkWithLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WiFiNetworkWithLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WiFiNetworkWithLocation):
            return True

        return self.to_dict() != other.to_dict()
