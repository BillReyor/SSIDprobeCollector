# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WiFiLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alt': 'int',
        'accuracy': 'float',
        'lastupdt': 'datetime',
        'latitude': 'float',
        'longitude': 'float',
        'month': 'str',
        'ssid': 'str',
        'time': 'datetime',
        'signal': 'float',
        'name': 'str',
        'net_id': 'str',
        'noise': 'float',
        'snr': 'float',
        'wep': 'str',
        'channel': 'int',
        'encryption_value': 'str'
    }

    attribute_map = {
        'alt': 'alt',
        'accuracy': 'accuracy',
        'lastupdt': 'lastupdt',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'month': 'month',
        'ssid': 'ssid',
        'time': 'time',
        'signal': 'signal',
        'name': 'name',
        'net_id': 'netId',
        'noise': 'noise',
        'snr': 'snr',
        'wep': 'wep',
        'channel': 'channel',
        'encryption_value': 'encryptionValue'
    }

    def __init__(self, alt=None, accuracy=None, lastupdt=None, latitude=None, longitude=None, month=None, ssid=None, time=None, signal=None, name=None, net_id=None, noise=None, snr=None, wep=None, channel=None, encryption_value=None, _configuration=None):  # noqa: E501
        """WiFiLocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alt = None
        self._accuracy = None
        self._lastupdt = None
        self._latitude = None
        self._longitude = None
        self._month = None
        self._ssid = None
        self._time = None
        self._signal = None
        self._name = None
        self._net_id = None
        self._noise = None
        self._snr = None
        self._wep = None
        self._channel = None
        self._encryption_value = None
        self.discriminator = None

        if alt is not None:
            self.alt = alt
        if accuracy is not None:
            self.accuracy = accuracy
        if lastupdt is not None:
            self.lastupdt = lastupdt
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if month is not None:
            self.month = month
        if ssid is not None:
            self.ssid = ssid
        if time is not None:
            self.time = time
        if signal is not None:
            self.signal = signal
        if name is not None:
            self.name = name
        if net_id is not None:
            self.net_id = net_id
        if noise is not None:
            self.noise = noise
        if snr is not None:
            self.snr = snr
        if wep is not None:
            self.wep = wep
        if channel is not None:
            self.channel = channel
        if encryption_value is not None:
            self.encryption_value = encryption_value

    @property
    def alt(self):
        """Gets the alt of this WiFiLocation.  # noqa: E501


        :return: The alt of this WiFiLocation.  # noqa: E501
        :rtype: int
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this WiFiLocation.


        :param alt: The alt of this WiFiLocation.  # noqa: E501
        :type: int
        """

        self._alt = alt

    @property
    def accuracy(self):
        """Gets the accuracy of this WiFiLocation.  # noqa: E501


        :return: The accuracy of this WiFiLocation.  # noqa: E501
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this WiFiLocation.


        :param accuracy: The accuracy of this WiFiLocation.  # noqa: E501
        :type: float
        """

        self._accuracy = accuracy

    @property
    def lastupdt(self):
        """Gets the lastupdt of this WiFiLocation.  # noqa: E501


        :return: The lastupdt of this WiFiLocation.  # noqa: E501
        :rtype: datetime
        """
        return self._lastupdt

    @lastupdt.setter
    def lastupdt(self, lastupdt):
        """Sets the lastupdt of this WiFiLocation.


        :param lastupdt: The lastupdt of this WiFiLocation.  # noqa: E501
        :type: datetime
        """

        self._lastupdt = lastupdt

    @property
    def latitude(self):
        """Gets the latitude of this WiFiLocation.  # noqa: E501


        :return: The latitude of this WiFiLocation.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this WiFiLocation.


        :param latitude: The latitude of this WiFiLocation.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this WiFiLocation.  # noqa: E501


        :return: The longitude of this WiFiLocation.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this WiFiLocation.


        :param longitude: The longitude of this WiFiLocation.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def month(self):
        """Gets the month of this WiFiLocation.  # noqa: E501


        :return: The month of this WiFiLocation.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this WiFiLocation.


        :param month: The month of this WiFiLocation.  # noqa: E501
        :type: str
        """

        self._month = month

    @property
    def ssid(self):
        """Gets the ssid of this WiFiLocation.  # noqa: E501


        :return: The ssid of this WiFiLocation.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this WiFiLocation.


        :param ssid: The ssid of this WiFiLocation.  # noqa: E501
        :type: str
        """

        self._ssid = ssid

    @property
    def time(self):
        """Gets the time of this WiFiLocation.  # noqa: E501


        :return: The time of this WiFiLocation.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this WiFiLocation.


        :param time: The time of this WiFiLocation.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def signal(self):
        """Gets the signal of this WiFiLocation.  # noqa: E501


        :return: The signal of this WiFiLocation.  # noqa: E501
        :rtype: float
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this WiFiLocation.


        :param signal: The signal of this WiFiLocation.  # noqa: E501
        :type: float
        """

        self._signal = signal

    @property
    def name(self):
        """Gets the name of this WiFiLocation.  # noqa: E501


        :return: The name of this WiFiLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WiFiLocation.


        :param name: The name of this WiFiLocation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def net_id(self):
        """Gets the net_id of this WiFiLocation.  # noqa: E501


        :return: The net_id of this WiFiLocation.  # noqa: E501
        :rtype: str
        """
        return self._net_id

    @net_id.setter
    def net_id(self, net_id):
        """Sets the net_id of this WiFiLocation.


        :param net_id: The net_id of this WiFiLocation.  # noqa: E501
        :type: str
        """

        self._net_id = net_id

    @property
    def noise(self):
        """Gets the noise of this WiFiLocation.  # noqa: E501


        :return: The noise of this WiFiLocation.  # noqa: E501
        :rtype: float
        """
        return self._noise

    @noise.setter
    def noise(self, noise):
        """Sets the noise of this WiFiLocation.


        :param noise: The noise of this WiFiLocation.  # noqa: E501
        :type: float
        """

        self._noise = noise

    @property
    def snr(self):
        """Gets the snr of this WiFiLocation.  # noqa: E501


        :return: The snr of this WiFiLocation.  # noqa: E501
        :rtype: float
        """
        return self._snr

    @snr.setter
    def snr(self, snr):
        """Sets the snr of this WiFiLocation.


        :param snr: The snr of this WiFiLocation.  # noqa: E501
        :type: float
        """

        self._snr = snr

    @property
    def wep(self):
        """Gets the wep of this WiFiLocation.  # noqa: E501


        :return: The wep of this WiFiLocation.  # noqa: E501
        :rtype: str
        """
        return self._wep

    @wep.setter
    def wep(self, wep):
        """Sets the wep of this WiFiLocation.


        :param wep: The wep of this WiFiLocation.  # noqa: E501
        :type: str
        """

        self._wep = wep

    @property
    def channel(self):
        """Gets the channel of this WiFiLocation.  # noqa: E501


        :return: The channel of this WiFiLocation.  # noqa: E501
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this WiFiLocation.


        :param channel: The channel of this WiFiLocation.  # noqa: E501
        :type: int
        """

        self._channel = channel

    @property
    def encryption_value(self):
        """Gets the encryption_value of this WiFiLocation.  # noqa: E501


        :return: The encryption_value of this WiFiLocation.  # noqa: E501
        :rtype: str
        """
        return self._encryption_value

    @encryption_value.setter
    def encryption_value(self, encryption_value):
        """Sets the encryption_value of this WiFiLocation.


        :param encryption_value: The encryption_value of this WiFiLocation.  # noqa: E501
        :type: str
        """

        self._encryption_value = encryption_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WiFiLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WiFiLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WiFiLocation):
            return True

        return self.to_dict() != other.to_dict()
