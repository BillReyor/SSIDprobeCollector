# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NetSearchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'total_results': 'int',
        'first': 'int',
        'last': 'int',
        'result_count': 'int',
        'results': 'list[WiFiNetwork]',
        'search_after': 'str',
        'search_after': 'int'
    }

    attribute_map = {
        'success': 'success',
        'total_results': 'totalResults',
        'first': 'first',
        'last': 'last',
        'result_count': 'resultCount',
        'results': 'results',
        'search_after': 'searchAfter',
        'search_after': 'search_after'
    }

    def __init__(self, success=None, total_results=None, first=None, last=None, result_count=None, results=None, search_after=None, search_after=None, _configuration=None):  # noqa: E501
        """NetSearchResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._success = None
        self._total_results = None
        self._first = None
        self._last = None
        self._result_count = None
        self._results = None
        self._search_after = None
        self._search_after = None
        self.discriminator = None

        if success is not None:
            self.success = success
        if total_results is not None:
            self.total_results = total_results
        if first is not None:
            self.first = first
        if last is not None:
            self.last = last
        if result_count is not None:
            self.result_count = result_count
        if results is not None:
            self.results = results
        if search_after is not None:
            self.search_after = search_after
        if search_after is not None:
            self.search_after = search_after

    @property
    def success(self):
        """Gets the success of this NetSearchResponse.  # noqa: E501


        :return: The success of this NetSearchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this NetSearchResponse.


        :param success: The success of this NetSearchResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def total_results(self):
        """Gets the total_results of this NetSearchResponse.  # noqa: E501


        :return: The total_results of this NetSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this NetSearchResponse.


        :param total_results: The total_results of this NetSearchResponse.  # noqa: E501
        :type: int
        """

        self._total_results = total_results

    @property
    def first(self):
        """Gets the first of this NetSearchResponse.  # noqa: E501


        :return: The first of this NetSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this NetSearchResponse.


        :param first: The first of this NetSearchResponse.  # noqa: E501
        :type: int
        """

        self._first = first

    @property
    def last(self):
        """Gets the last of this NetSearchResponse.  # noqa: E501


        :return: The last of this NetSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this NetSearchResponse.


        :param last: The last of this NetSearchResponse.  # noqa: E501
        :type: int
        """

        self._last = last

    @property
    def result_count(self):
        """Gets the result_count of this NetSearchResponse.  # noqa: E501


        :return: The result_count of this NetSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._result_count

    @result_count.setter
    def result_count(self, result_count):
        """Sets the result_count of this NetSearchResponse.


        :param result_count: The result_count of this NetSearchResponse.  # noqa: E501
        :type: int
        """

        self._result_count = result_count

    @property
    def results(self):
        """Gets the results of this NetSearchResponse.  # noqa: E501


        :return: The results of this NetSearchResponse.  # noqa: E501
        :rtype: list[WiFiNetwork]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this NetSearchResponse.


        :param results: The results of this NetSearchResponse.  # noqa: E501
        :type: list[WiFiNetwork]
        """

        self._results = results

    @property
    def search_after(self):
        """Gets the search_after of this NetSearchResponse.  # noqa: E501

        Use this in future searches to get the next page of data  # noqa: E501

        :return: The search_after of this NetSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._search_after

    @search_after.setter
    def search_after(self, search_after):
        """Sets the search_after of this NetSearchResponse.

        Use this in future searches to get the next page of data  # noqa: E501

        :param search_after: The search_after of this NetSearchResponse.  # noqa: E501
        :type: str
        """

        self._search_after = search_after

    @property
    def search_after(self):
        """Gets the search_after of this NetSearchResponse.  # noqa: E501

        deprecated  # noqa: E501

        :return: The search_after of this NetSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._search_after

    @search_after.setter
    def search_after(self, search_after):
        """Sets the search_after of this NetSearchResponse.

        deprecated  # noqa: E501

        :param search_after: The search_after of this NetSearchResponse.  # noqa: E501
        :type: int
        """

        self._search_after = search_after

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetSearchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetSearchResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetSearchResponse):
            return True

        return self.to_dict() != other.to_dict()
