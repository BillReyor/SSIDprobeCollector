# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_id': 'str',
        'group_name': 'str',
        'owner': 'str',
        'discovered': 'int',
        'total': 'int',
        'gen_disc': 'int',
        'auth_type': 'str',
        'group_owner': 'bool'
    }

    attribute_map = {
        'group_id': 'groupId',
        'group_name': 'groupName',
        'owner': 'owner',
        'discovered': 'discovered',
        'total': 'total',
        'gen_disc': 'genDisc',
        'auth_type': 'authType',
        'group_owner': 'groupOwner'
    }

    def __init__(self, group_id=None, group_name=None, owner=None, discovered=None, total=None, gen_disc=None, auth_type=None, group_owner=None, _configuration=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._group_id = None
        self._group_name = None
        self._owner = None
        self._discovered = None
        self._total = None
        self._gen_disc = None
        self._auth_type = None
        self._group_owner = None
        self.discriminator = None

        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        if owner is not None:
            self.owner = owner
        if discovered is not None:
            self.discovered = discovered
        if total is not None:
            self.total = total
        if gen_disc is not None:
            self.gen_disc = gen_disc
        if auth_type is not None:
            self.auth_type = auth_type
        if group_owner is not None:
            self.group_owner = group_owner

    @property
    def group_id(self):
        """Gets the group_id of this Group.  # noqa: E501


        :return: The group_id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Group.


        :param group_id: The group_id of this Group.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this Group.  # noqa: E501


        :return: The group_name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this Group.


        :param group_name: The group_name of this Group.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def owner(self):
        """Gets the owner of this Group.  # noqa: E501


        :return: The owner of this Group.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Group.


        :param owner: The owner of this Group.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def discovered(self):
        """Gets the discovered of this Group.  # noqa: E501


        :return: The discovered of this Group.  # noqa: E501
        :rtype: int
        """
        return self._discovered

    @discovered.setter
    def discovered(self, discovered):
        """Sets the discovered of this Group.


        :param discovered: The discovered of this Group.  # noqa: E501
        :type: int
        """

        self._discovered = discovered

    @property
    def total(self):
        """Gets the total of this Group.  # noqa: E501


        :return: The total of this Group.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Group.


        :param total: The total of this Group.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def gen_disc(self):
        """Gets the gen_disc of this Group.  # noqa: E501


        :return: The gen_disc of this Group.  # noqa: E501
        :rtype: int
        """
        return self._gen_disc

    @gen_disc.setter
    def gen_disc(self, gen_disc):
        """Sets the gen_disc of this Group.


        :param gen_disc: The gen_disc of this Group.  # noqa: E501
        :type: int
        """

        self._gen_disc = gen_disc

    @property
    def auth_type(self):
        """Gets the auth_type of this Group.  # noqa: E501


        :return: The auth_type of this Group.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Group.


        :param auth_type: The auth_type of this Group.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def group_owner(self):
        """Gets the group_owner of this Group.  # noqa: E501


        :return: The group_owner of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._group_owner

    @group_owner.setter
    def group_owner(self, group_owner):
        """Sets the group_owner of this Group.


        :param group_owner: The group_owner of this Group.  # noqa: E501
        :type: bool
        """

        self._group_owner = group_owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Group):
            return True

        return self.to_dict() != other.to_dict()
