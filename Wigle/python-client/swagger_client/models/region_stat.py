# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RegionStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'str',
        'wifi_count': 'int',
        'cell_count': 'int',
        'bt_count': 'int'
    }

    attribute_map = {
        'region': 'region',
        'wifi_count': 'wifiCount',
        'cell_count': 'cellCount',
        'bt_count': 'btCount'
    }

    def __init__(self, region=None, wifi_count=None, cell_count=None, bt_count=None, _configuration=None):  # noqa: E501
        """RegionStat - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._region = None
        self._wifi_count = None
        self._cell_count = None
        self._bt_count = None
        self.discriminator = None

        if region is not None:
            self.region = region
        if wifi_count is not None:
            self.wifi_count = wifi_count
        if cell_count is not None:
            self.cell_count = cell_count
        if bt_count is not None:
            self.bt_count = bt_count

    @property
    def region(self):
        """Gets the region of this RegionStat.  # noqa: E501


        :return: The region of this RegionStat.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RegionStat.


        :param region: The region of this RegionStat.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def wifi_count(self):
        """Gets the wifi_count of this RegionStat.  # noqa: E501


        :return: The wifi_count of this RegionStat.  # noqa: E501
        :rtype: int
        """
        return self._wifi_count

    @wifi_count.setter
    def wifi_count(self, wifi_count):
        """Sets the wifi_count of this RegionStat.


        :param wifi_count: The wifi_count of this RegionStat.  # noqa: E501
        :type: int
        """

        self._wifi_count = wifi_count

    @property
    def cell_count(self):
        """Gets the cell_count of this RegionStat.  # noqa: E501


        :return: The cell_count of this RegionStat.  # noqa: E501
        :rtype: int
        """
        return self._cell_count

    @cell_count.setter
    def cell_count(self, cell_count):
        """Sets the cell_count of this RegionStat.


        :param cell_count: The cell_count of this RegionStat.  # noqa: E501
        :type: int
        """

        self._cell_count = cell_count

    @property
    def bt_count(self):
        """Gets the bt_count of this RegionStat.  # noqa: E501


        :return: The bt_count of this RegionStat.  # noqa: E501
        :rtype: int
        """
        return self._bt_count

    @bt_count.setter
    def bt_count(self, bt_count):
        """Sets the bt_count of this RegionStat.


        :param bt_count: The bt_count of this RegionStat.  # noqa: E501
        :type: int
        """

        self._bt_count = bt_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegionStat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegionStat):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegionStat):
            return True

        return self.to_dict() != other.to_dict()
