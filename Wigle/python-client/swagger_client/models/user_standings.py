# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserStandings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rank': 'int',
        'month_rank': 'int',
        'user_name': 'str',
        'discovered_wi_fi_gps': 'int',
        'discovered_wi_fi_gps_percent': 'float',
        'discovered_wi_fi': 'int',
        'discovered_cell_gps': 'int',
        'discovered_cell': 'int',
        'discovered_bt_gps': 'int',
        'discovered_bt': 'int',
        'event_month_count': 'int',
        'event_prev_month_count': 'int',
        'prev_rank': 'int',
        'prev_month_rank': 'int',
        'total_wi_fi_locations': 'int',
        'first': 'str',
        'last': 'str',
        '_self': 'bool'
    }

    attribute_map = {
        'rank': 'rank',
        'month_rank': 'monthRank',
        'user_name': 'userName',
        'discovered_wi_fi_gps': 'discoveredWiFiGPS',
        'discovered_wi_fi_gps_percent': 'discoveredWiFiGPSPercent',
        'discovered_wi_fi': 'discoveredWiFi',
        'discovered_cell_gps': 'discoveredCellGPS',
        'discovered_cell': 'discoveredCell',
        'discovered_bt_gps': 'discoveredBtGPS',
        'discovered_bt': 'discoveredBt',
        'event_month_count': 'eventMonthCount',
        'event_prev_month_count': 'eventPrevMonthCount',
        'prev_rank': 'prevRank',
        'prev_month_rank': 'prevMonthRank',
        'total_wi_fi_locations': 'totalWiFiLocations',
        'first': 'first',
        'last': 'last',
        '_self': 'self'
    }

    def __init__(self, rank=None, month_rank=None, user_name=None, discovered_wi_fi_gps=None, discovered_wi_fi_gps_percent=None, discovered_wi_fi=None, discovered_cell_gps=None, discovered_cell=None, discovered_bt_gps=None, discovered_bt=None, event_month_count=None, event_prev_month_count=None, prev_rank=None, prev_month_rank=None, total_wi_fi_locations=None, first=None, last=None, _self=None, _configuration=None):  # noqa: E501
        """UserStandings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._rank = None
        self._month_rank = None
        self._user_name = None
        self._discovered_wi_fi_gps = None
        self._discovered_wi_fi_gps_percent = None
        self._discovered_wi_fi = None
        self._discovered_cell_gps = None
        self._discovered_cell = None
        self._discovered_bt_gps = None
        self._discovered_bt = None
        self._event_month_count = None
        self._event_prev_month_count = None
        self._prev_rank = None
        self._prev_month_rank = None
        self._total_wi_fi_locations = None
        self._first = None
        self._last = None
        self.__self = None
        self.discriminator = None

        if rank is not None:
            self.rank = rank
        if month_rank is not None:
            self.month_rank = month_rank
        if user_name is not None:
            self.user_name = user_name
        if discovered_wi_fi_gps is not None:
            self.discovered_wi_fi_gps = discovered_wi_fi_gps
        if discovered_wi_fi_gps_percent is not None:
            self.discovered_wi_fi_gps_percent = discovered_wi_fi_gps_percent
        if discovered_wi_fi is not None:
            self.discovered_wi_fi = discovered_wi_fi
        if discovered_cell_gps is not None:
            self.discovered_cell_gps = discovered_cell_gps
        if discovered_cell is not None:
            self.discovered_cell = discovered_cell
        if discovered_bt_gps is not None:
            self.discovered_bt_gps = discovered_bt_gps
        if discovered_bt is not None:
            self.discovered_bt = discovered_bt
        if event_month_count is not None:
            self.event_month_count = event_month_count
        if event_prev_month_count is not None:
            self.event_prev_month_count = event_prev_month_count
        if prev_rank is not None:
            self.prev_rank = prev_rank
        if prev_month_rank is not None:
            self.prev_month_rank = prev_month_rank
        if total_wi_fi_locations is not None:
            self.total_wi_fi_locations = total_wi_fi_locations
        if first is not None:
            self.first = first
        if last is not None:
            self.last = last
        if _self is not None:
            self._self = _self

    @property
    def rank(self):
        """Gets the rank of this UserStandings.  # noqa: E501


        :return: The rank of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this UserStandings.


        :param rank: The rank of this UserStandings.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def month_rank(self):
        """Gets the month_rank of this UserStandings.  # noqa: E501


        :return: The month_rank of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._month_rank

    @month_rank.setter
    def month_rank(self, month_rank):
        """Sets the month_rank of this UserStandings.


        :param month_rank: The month_rank of this UserStandings.  # noqa: E501
        :type: int
        """

        self._month_rank = month_rank

    @property
    def user_name(self):
        """Gets the user_name of this UserStandings.  # noqa: E501


        :return: The user_name of this UserStandings.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserStandings.


        :param user_name: The user_name of this UserStandings.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def discovered_wi_fi_gps(self):
        """Gets the discovered_wi_fi_gps of this UserStandings.  # noqa: E501


        :return: The discovered_wi_fi_gps of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._discovered_wi_fi_gps

    @discovered_wi_fi_gps.setter
    def discovered_wi_fi_gps(self, discovered_wi_fi_gps):
        """Sets the discovered_wi_fi_gps of this UserStandings.


        :param discovered_wi_fi_gps: The discovered_wi_fi_gps of this UserStandings.  # noqa: E501
        :type: int
        """

        self._discovered_wi_fi_gps = discovered_wi_fi_gps

    @property
    def discovered_wi_fi_gps_percent(self):
        """Gets the discovered_wi_fi_gps_percent of this UserStandings.  # noqa: E501


        :return: The discovered_wi_fi_gps_percent of this UserStandings.  # noqa: E501
        :rtype: float
        """
        return self._discovered_wi_fi_gps_percent

    @discovered_wi_fi_gps_percent.setter
    def discovered_wi_fi_gps_percent(self, discovered_wi_fi_gps_percent):
        """Sets the discovered_wi_fi_gps_percent of this UserStandings.


        :param discovered_wi_fi_gps_percent: The discovered_wi_fi_gps_percent of this UserStandings.  # noqa: E501
        :type: float
        """

        self._discovered_wi_fi_gps_percent = discovered_wi_fi_gps_percent

    @property
    def discovered_wi_fi(self):
        """Gets the discovered_wi_fi of this UserStandings.  # noqa: E501


        :return: The discovered_wi_fi of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._discovered_wi_fi

    @discovered_wi_fi.setter
    def discovered_wi_fi(self, discovered_wi_fi):
        """Sets the discovered_wi_fi of this UserStandings.


        :param discovered_wi_fi: The discovered_wi_fi of this UserStandings.  # noqa: E501
        :type: int
        """

        self._discovered_wi_fi = discovered_wi_fi

    @property
    def discovered_cell_gps(self):
        """Gets the discovered_cell_gps of this UserStandings.  # noqa: E501


        :return: The discovered_cell_gps of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._discovered_cell_gps

    @discovered_cell_gps.setter
    def discovered_cell_gps(self, discovered_cell_gps):
        """Sets the discovered_cell_gps of this UserStandings.


        :param discovered_cell_gps: The discovered_cell_gps of this UserStandings.  # noqa: E501
        :type: int
        """

        self._discovered_cell_gps = discovered_cell_gps

    @property
    def discovered_cell(self):
        """Gets the discovered_cell of this UserStandings.  # noqa: E501


        :return: The discovered_cell of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._discovered_cell

    @discovered_cell.setter
    def discovered_cell(self, discovered_cell):
        """Sets the discovered_cell of this UserStandings.


        :param discovered_cell: The discovered_cell of this UserStandings.  # noqa: E501
        :type: int
        """

        self._discovered_cell = discovered_cell

    @property
    def discovered_bt_gps(self):
        """Gets the discovered_bt_gps of this UserStandings.  # noqa: E501


        :return: The discovered_bt_gps of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._discovered_bt_gps

    @discovered_bt_gps.setter
    def discovered_bt_gps(self, discovered_bt_gps):
        """Sets the discovered_bt_gps of this UserStandings.


        :param discovered_bt_gps: The discovered_bt_gps of this UserStandings.  # noqa: E501
        :type: int
        """

        self._discovered_bt_gps = discovered_bt_gps

    @property
    def discovered_bt(self):
        """Gets the discovered_bt of this UserStandings.  # noqa: E501


        :return: The discovered_bt of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._discovered_bt

    @discovered_bt.setter
    def discovered_bt(self, discovered_bt):
        """Sets the discovered_bt of this UserStandings.


        :param discovered_bt: The discovered_bt of this UserStandings.  # noqa: E501
        :type: int
        """

        self._discovered_bt = discovered_bt

    @property
    def event_month_count(self):
        """Gets the event_month_count of this UserStandings.  # noqa: E501


        :return: The event_month_count of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._event_month_count

    @event_month_count.setter
    def event_month_count(self, event_month_count):
        """Sets the event_month_count of this UserStandings.


        :param event_month_count: The event_month_count of this UserStandings.  # noqa: E501
        :type: int
        """

        self._event_month_count = event_month_count

    @property
    def event_prev_month_count(self):
        """Gets the event_prev_month_count of this UserStandings.  # noqa: E501


        :return: The event_prev_month_count of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._event_prev_month_count

    @event_prev_month_count.setter
    def event_prev_month_count(self, event_prev_month_count):
        """Sets the event_prev_month_count of this UserStandings.


        :param event_prev_month_count: The event_prev_month_count of this UserStandings.  # noqa: E501
        :type: int
        """

        self._event_prev_month_count = event_prev_month_count

    @property
    def prev_rank(self):
        """Gets the prev_rank of this UserStandings.  # noqa: E501


        :return: The prev_rank of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._prev_rank

    @prev_rank.setter
    def prev_rank(self, prev_rank):
        """Sets the prev_rank of this UserStandings.


        :param prev_rank: The prev_rank of this UserStandings.  # noqa: E501
        :type: int
        """

        self._prev_rank = prev_rank

    @property
    def prev_month_rank(self):
        """Gets the prev_month_rank of this UserStandings.  # noqa: E501


        :return: The prev_month_rank of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._prev_month_rank

    @prev_month_rank.setter
    def prev_month_rank(self, prev_month_rank):
        """Sets the prev_month_rank of this UserStandings.


        :param prev_month_rank: The prev_month_rank of this UserStandings.  # noqa: E501
        :type: int
        """

        self._prev_month_rank = prev_month_rank

    @property
    def total_wi_fi_locations(self):
        """Gets the total_wi_fi_locations of this UserStandings.  # noqa: E501


        :return: The total_wi_fi_locations of this UserStandings.  # noqa: E501
        :rtype: int
        """
        return self._total_wi_fi_locations

    @total_wi_fi_locations.setter
    def total_wi_fi_locations(self, total_wi_fi_locations):
        """Sets the total_wi_fi_locations of this UserStandings.


        :param total_wi_fi_locations: The total_wi_fi_locations of this UserStandings.  # noqa: E501
        :type: int
        """

        self._total_wi_fi_locations = total_wi_fi_locations

    @property
    def first(self):
        """Gets the first of this UserStandings.  # noqa: E501


        :return: The first of this UserStandings.  # noqa: E501
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this UserStandings.


        :param first: The first of this UserStandings.  # noqa: E501
        :type: str
        """

        self._first = first

    @property
    def last(self):
        """Gets the last of this UserStandings.  # noqa: E501


        :return: The last of this UserStandings.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this UserStandings.


        :param last: The last of this UserStandings.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def _self(self):
        """Gets the _self of this UserStandings.  # noqa: E501


        :return: The _self of this UserStandings.  # noqa: E501
        :rtype: bool
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this UserStandings.


        :param _self: The _self of this UserStandings.  # noqa: E501
        :type: bool
        """

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserStandings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserStandings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserStandings):
            return True

        return self.to_dict() != other.to_dict()
