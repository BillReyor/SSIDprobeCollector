# coding: utf-8

"""
    WiGLE API

    Search, upload, and integrate statistics from WiGLE. Use API Name+Token from https://wigle.net/account  # noqa: E501

    OpenAPI spec version: 3.1
    Contact: WiGLE-admin@wigle.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserStatsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'image_badge_url': 'str',
        'statistics': 'UserStandings',
        'rank': 'int',
        'month_rank': 'int',
        'user': 'str'
    }

    attribute_map = {
        'success': 'success',
        'image_badge_url': 'imageBadgeUrl',
        'statistics': 'statistics',
        'rank': 'rank',
        'month_rank': 'monthRank',
        'user': 'user'
    }

    def __init__(self, success=None, image_badge_url=None, statistics=None, rank=None, month_rank=None, user=None, _configuration=None):  # noqa: E501
        """UserStatsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._success = None
        self._image_badge_url = None
        self._statistics = None
        self._rank = None
        self._month_rank = None
        self._user = None
        self.discriminator = None

        if success is not None:
            self.success = success
        if image_badge_url is not None:
            self.image_badge_url = image_badge_url
        if statistics is not None:
            self.statistics = statistics
        if rank is not None:
            self.rank = rank
        if month_rank is not None:
            self.month_rank = month_rank
        if user is not None:
            self.user = user

    @property
    def success(self):
        """Gets the success of this UserStatsResponse.  # noqa: E501


        :return: The success of this UserStatsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this UserStatsResponse.


        :param success: The success of this UserStatsResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def image_badge_url(self):
        """Gets the image_badge_url of this UserStatsResponse.  # noqa: E501


        :return: The image_badge_url of this UserStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_badge_url

    @image_badge_url.setter
    def image_badge_url(self, image_badge_url):
        """Sets the image_badge_url of this UserStatsResponse.


        :param image_badge_url: The image_badge_url of this UserStatsResponse.  # noqa: E501
        :type: str
        """

        self._image_badge_url = image_badge_url

    @property
    def statistics(self):
        """Gets the statistics of this UserStatsResponse.  # noqa: E501


        :return: The statistics of this UserStatsResponse.  # noqa: E501
        :rtype: UserStandings
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this UserStatsResponse.


        :param statistics: The statistics of this UserStatsResponse.  # noqa: E501
        :type: UserStandings
        """

        self._statistics = statistics

    @property
    def rank(self):
        """Gets the rank of this UserStatsResponse.  # noqa: E501


        :return: The rank of this UserStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this UserStatsResponse.


        :param rank: The rank of this UserStatsResponse.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def month_rank(self):
        """Gets the month_rank of this UserStatsResponse.  # noqa: E501


        :return: The month_rank of this UserStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._month_rank

    @month_rank.setter
    def month_rank(self, month_rank):
        """Sets the month_rank of this UserStatsResponse.


        :param month_rank: The month_rank of this UserStatsResponse.  # noqa: E501
        :type: int
        """

        self._month_rank = month_rank

    @property
    def user(self):
        """Gets the user of this UserStatsResponse.  # noqa: E501


        :return: The user of this UserStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserStatsResponse.


        :param user: The user of this UserStatsResponse.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserStatsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserStatsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserStatsResponse):
            return True

        return self.to_dict() != other.to_dict()
